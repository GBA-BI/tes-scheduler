// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scheduler/plugin/plugin.go

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	reflect "reflect"

	models "github.com/GBA-BI/tes-scheduler/pkg/scheduler/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPlugin)(nil).Name))
}

// FakeSortPlugin is a mock of SortPlugin interface.
type FakeSortPlugin struct {
	ctrl     *gomock.Controller
	recorder *FakeSortPluginMockRecorder
}

// FakeSortPluginMockRecorder is the mock recorder for FakeSortPlugin.
type FakeSortPluginMockRecorder struct {
	mock *FakeSortPlugin
}

// NewFakeSortPlugin creates a new mock instance.
func NewFakeSortPlugin(ctrl *gomock.Controller) *FakeSortPlugin {
	mock := &FakeSortPlugin{ctrl: ctrl}
	mock.recorder = &FakeSortPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeSortPlugin) EXPECT() *FakeSortPluginMockRecorder {
	return m.recorder
}

// Less mocks base method.
func (m *FakeSortPlugin) Less(taskI, taskJ *models.TaskInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Less", taskI, taskJ)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Less indicates an expected call of Less.
func (mr *FakeSortPluginMockRecorder) Less(taskI, taskJ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Less", reflect.TypeOf((*FakeSortPlugin)(nil).Less), taskI, taskJ)
}

// Name mocks base method.
func (m *FakeSortPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *FakeSortPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*FakeSortPlugin)(nil).Name))
}

// FakeGlobalFilterPlugin is a mock of GlobalFilterPlugin interface.
type FakeGlobalFilterPlugin struct {
	ctrl     *gomock.Controller
	recorder *FakeGlobalFilterPluginMockRecorder
}

// FakeGlobalFilterPluginMockRecorder is the mock recorder for FakeGlobalFilterPlugin.
type FakeGlobalFilterPluginMockRecorder struct {
	mock *FakeGlobalFilterPlugin
}

// NewFakeGlobalFilterPlugin creates a new mock instance.
func NewFakeGlobalFilterPlugin(ctrl *gomock.Controller) *FakeGlobalFilterPlugin {
	mock := &FakeGlobalFilterPlugin{ctrl: ctrl}
	mock.recorder = &FakeGlobalFilterPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeGlobalFilterPlugin) EXPECT() *FakeGlobalFilterPluginMockRecorder {
	return m.recorder
}

// GlobalFilter mocks base method.
func (m *FakeGlobalFilterPlugin) GlobalFilter(ctx context.Context, task *models.TaskInfo, cycleState map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalFilter", ctx, task, cycleState)
	ret0, _ := ret[0].(error)
	return ret0
}

// GlobalFilter indicates an expected call of GlobalFilter.
func (mr *FakeGlobalFilterPluginMockRecorder) GlobalFilter(ctx, task, cycleState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalFilter", reflect.TypeOf((*FakeGlobalFilterPlugin)(nil).GlobalFilter), ctx, task, cycleState)
}

// Name mocks base method.
func (m *FakeGlobalFilterPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *FakeGlobalFilterPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*FakeGlobalFilterPlugin)(nil).Name))
}

// FakeFilterPlugin is a mock of FilterPlugin interface.
type FakeFilterPlugin struct {
	ctrl     *gomock.Controller
	recorder *FakeFilterPluginMockRecorder
}

// FakeFilterPluginMockRecorder is the mock recorder for FakeFilterPlugin.
type FakeFilterPluginMockRecorder struct {
	mock *FakeFilterPlugin
}

// NewFakeFilterPlugin creates a new mock instance.
func NewFakeFilterPlugin(ctrl *gomock.Controller) *FakeFilterPlugin {
	mock := &FakeFilterPlugin{ctrl: ctrl}
	mock.recorder = &FakeFilterPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeFilterPlugin) EXPECT() *FakeFilterPluginMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *FakeFilterPlugin) Filter(ctx context.Context, task *models.TaskInfo, cluster *models.ClusterInfo, cycleState map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, task, cluster, cycleState)
	ret0, _ := ret[0].(error)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *FakeFilterPluginMockRecorder) Filter(ctx, task, cluster, cycleState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*FakeFilterPlugin)(nil).Filter), ctx, task, cluster, cycleState)
}

// Name mocks base method.
func (m *FakeFilterPlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *FakeFilterPluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*FakeFilterPlugin)(nil).Name))
}

// FakeScorePlugin is a mock of ScorePlugin interface.
type FakeScorePlugin struct {
	ctrl     *gomock.Controller
	recorder *FakeScorePluginMockRecorder
}

// FakeScorePluginMockRecorder is the mock recorder for FakeScorePlugin.
type FakeScorePluginMockRecorder struct {
	mock *FakeScorePlugin
}

// NewFakeScorePlugin creates a new mock instance.
func NewFakeScorePlugin(ctrl *gomock.Controller) *FakeScorePlugin {
	mock := &FakeScorePlugin{ctrl: ctrl}
	mock.recorder = &FakeScorePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeScorePlugin) EXPECT() *FakeScorePluginMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *FakeScorePlugin) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *FakeScorePluginMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*FakeScorePlugin)(nil).Name))
}

// Score mocks base method.
func (m *FakeScorePlugin) Score(ctx context.Context, task *models.TaskInfo, cluster *models.ClusterInfo, cycleState map[string]interface{}) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Score", ctx, task, cluster, cycleState)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Score indicates an expected call of Score.
func (mr *FakeScorePluginMockRecorder) Score(ctx, task, cluster, cycleState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*FakeScorePlugin)(nil).Score), ctx, task, cluster, cycleState)
}
