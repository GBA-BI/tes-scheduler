// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scheduler/cache/cluster.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	models "github.com/GBA-BI/tes-scheduler/pkg/scheduler/models"
	gomock "github.com/golang/mock/gomock"
)

// FakeClusterCache is a mock of ClusterCache interface.
type FakeClusterCache struct {
	ctrl     *gomock.Controller
	recorder *FakeClusterCacheMockRecorder
}

// FakeClusterCacheMockRecorder is the mock recorder for FakeClusterCache.
type FakeClusterCacheMockRecorder struct {
	mock *FakeClusterCache
}

// NewFakeClusterCache creates a new mock instance.
func NewFakeClusterCache(ctrl *gomock.Controller) *FakeClusterCache {
	mock := &FakeClusterCache{ctrl: ctrl}
	mock.recorder = &FakeClusterCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeClusterCache) EXPECT() *FakeClusterCacheMockRecorder {
	return m.recorder
}

// ListClusters mocks base method.
func (m *FakeClusterCache) ListClusters() []*models.ClusterInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters")
	ret0, _ := ret[0].([]*models.ClusterInfo)
	return ret0
}

// ListClusters indicates an expected call of ListClusters.
func (mr *FakeClusterCacheMockRecorder) ListClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*FakeClusterCache)(nil).ListClusters))
}
