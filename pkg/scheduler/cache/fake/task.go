// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scheduler/cache/task.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	models "github.com/GBA-BI/tes-scheduler/pkg/scheduler/models"
	gomock "github.com/golang/mock/gomock"
)

// FakeTaskCache is a mock of TaskCache interface.
type FakeTaskCache struct {
	ctrl     *gomock.Controller
	recorder *FakeTaskCacheMockRecorder
}

// FakeTaskCacheMockRecorder is the mock recorder for FakeTaskCache.
type FakeTaskCacheMockRecorder struct {
	mock *FakeTaskCache
}

// NewFakeTaskCache creates a new mock instance.
func NewFakeTaskCache(ctrl *gomock.Controller) *FakeTaskCache {
	mock := &FakeTaskCache{ctrl: ctrl}
	mock.recorder = &FakeTaskCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeTaskCache) EXPECT() *FakeTaskCacheMockRecorder {
	return m.recorder
}

// ListScheduledTasks mocks base method.
func (m *FakeTaskCache) ListScheduledTasks() []*models.TaskInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScheduledTasks")
	ret0, _ := ret[0].([]*models.TaskInfo)
	return ret0
}

// ListScheduledTasks indicates an expected call of ListScheduledTasks.
func (mr *FakeTaskCacheMockRecorder) ListScheduledTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledTasks", reflect.TypeOf((*FakeTaskCache)(nil).ListScheduledTasks))
}

// ListTaskClusterIDs mocks base method.
func (m *FakeTaskCache) ListTaskClusterIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskClusterIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListTaskClusterIDs indicates an expected call of ListTaskClusterIDs.
func (mr *FakeTaskCacheMockRecorder) ListTaskClusterIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskClusterIDs", reflect.TypeOf((*FakeTaskCache)(nil).ListTaskClusterIDs))
}

// ListTasks mocks base method.
func (m *FakeTaskCache) ListTasks(clusterID string) []*models.TaskInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", clusterID)
	ret0, _ := ret[0].([]*models.TaskInfo)
	return ret0
}

// ListTasks indicates an expected call of ListTasks.
func (mr *FakeTaskCacheMockRecorder) ListTasks(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*FakeTaskCache)(nil).ListTasks), clusterID)
}

// UpdateTask mocks base method.
func (m *FakeTaskCache) UpdateTask(ctx context.Context, id string, state, clusterID, message *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, id, state, clusterID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *FakeTaskCacheMockRecorder) UpdateTask(ctx, id, state, clusterID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*FakeTaskCache)(nil).UpdateTask), ctx, id, state, clusterID, message)
}
