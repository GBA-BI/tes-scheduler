// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/vetesclient/client.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	models "github.com/GBA-BI/tes-scheduler/pkg/vetesclient/models"
	gomock "github.com/golang/mock/gomock"
)

// FakeClient is a mock of Client interface.
type FakeClient struct {
	ctrl     *gomock.Controller
	recorder *FakeClientMockRecorder
}

// FakeClientMockRecorder is the mock recorder for FakeClient.
type FakeClientMockRecorder struct {
	mock *FakeClient
}

// NewFakeClient creates a new mock instance.
func NewFakeClient(ctrl *gomock.Controller) *FakeClient {
	mock := &FakeClient{ctrl: ctrl}
	mock.recorder = &FakeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeClient) EXPECT() *FakeClientMockRecorder {
	return m.recorder
}

// GatherTasksResources mocks base method.
func (m *FakeClient) GatherTasksResources(ctx context.Context, req *models.GatherTasksResourcesRequest) (*models.GatherTasksResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherTasksResources", ctx, req)
	ret0, _ := ret[0].(*models.GatherTasksResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherTasksResources indicates an expected call of GatherTasksResources.
func (mr *FakeClientMockRecorder) GatherTasksResources(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherTasksResources", reflect.TypeOf((*FakeClient)(nil).GatherTasksResources), ctx, req)
}

// GetQuota mocks base method.
func (m *FakeClient) GetQuota(ctx context.Context, req *models.GetQuotaRequest) (*models.GetQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", ctx, req)
	ret0, _ := ret[0].(*models.GetQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuota indicates an expected call of GetQuota.
func (mr *FakeClientMockRecorder) GetQuota(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*FakeClient)(nil).GetQuota), ctx, req)
}

// GetTask mocks base method.
func (m *FakeClient) GetTask(ctx context.Context, req *models.GetTaskRequest) (*models.GetTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, req)
	ret0, _ := ret[0].(*models.GetTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *FakeClientMockRecorder) GetTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*FakeClient)(nil).GetTask), ctx, req)
}

// ListClusters mocks base method.
func (m *FakeClient) ListClusters(ctx context.Context, req *models.ListClustersRequest) (*models.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, req)
	ret0, _ := ret[0].(*models.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *FakeClientMockRecorder) ListClusters(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*FakeClient)(nil).ListClusters), ctx, req)
}

// ListExtraPriority mocks base method.
func (m *FakeClient) ListExtraPriority(ctx context.Context, req *models.ListExtraPriorityRequest) (*models.ListExtraPriorityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExtraPriority", ctx, req)
	ret0, _ := ret[0].(*models.ListExtraPriorityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtraPriority indicates an expected call of ListExtraPriority.
func (mr *FakeClientMockRecorder) ListExtraPriority(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtraPriority", reflect.TypeOf((*FakeClient)(nil).ListExtraPriority), ctx, req)
}

// ListTasks mocks base method.
func (m *FakeClient) ListTasks(ctx context.Context, req *models.ListTasksRequest) (*models.ListTasksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx, req)
	ret0, _ := ret[0].(*models.ListTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *FakeClientMockRecorder) ListTasks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*FakeClient)(nil).ListTasks), ctx, req)
}

// UpdateTask mocks base method.
func (m *FakeClient) UpdateTask(ctx context.Context, req *models.UpdateTaskRequest) (*models.UpdateTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, req)
	ret0, _ := ret[0].(*models.UpdateTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *FakeClientMockRecorder) UpdateTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*FakeClient)(nil).UpdateTask), ctx, req)
}
